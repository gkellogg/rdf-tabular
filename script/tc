#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require 'logger'
require 'rdf/tabular'
require 'rdf/isomorphic'
require File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec', 'spec_helper'))
require File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec', 'suite_helper'))
require 'getoptlong'

ASSERTOR = "https://greggkellogg.net/foaf#me"
RUN_TIME = Time.now

def earl_preamble(options)
  options[:output].write File.read(File.expand_path("../../etc/doap.ttl", __FILE__))
  options[:output].puts %(
<> foaf:primaryTopic <https://rubygems.org/gems/rdf-tabular> ;
  dc:issued "#{RUN_TIME.xmlschema}"^^xsd:dateTime ;
  foaf:maker <#{ASSERTOR}> .

<#{ASSERTOR}> a foaf:Person, earl:Assertor;
  foaf:name "Gregg Kellogg";
  foaf:title "Implementor";
  foaf:homepage <https://greggkellogg.net/> .

<https://rubygems.org/gems/rdf-tabular>
  doap:release <https://github.com/ruby-rdf/rdf-tabular/tree/#{RDF::Tabular::VERSION}> .

<https://github.com/ruby-rdf/rdf-tabular/tree/#{RDF::Tabular::VERSION}> a doap:Version;
  doap:name "rdf-tabular-#{RDF::Tabular::VERSION}";
  doap:revision "#{RDF::Tabular::VERSION}" .
)
end

def run_tc(t, **options)
  STDERR.write "run #{t.id}"

  if options[:verbose]
    puts "\nTestCase: #{t.inspect}"
    puts "\nInput:\n" + t.input if t.input
    puts "\nExpected:\n" + t.expected if t.expected
  end

  graph = RDF::Repository.new
  json_result = nil
  result = nil
  t.logger = Logger.new(STDERR)
  t.logger.level = options[:level]
  t.logger.formatter = lambda {|severity, datetime, progname, msg| "#{severity}: #{msg}\n"}

  begin
    puts "open #{t.action}" if options[:verbose]
    options = {base_uri:  t.base}.merge(options)

    RDF::Tabular::Reader.open(t.action,
                             **t.reader_options.merge(
                               base_uri:  t.base,
                               validate:  t.validation?,
                               logger:    t.logger)
    ) do |reader|
      t.metadata = reader.metadata

      if t.positive_test?
        if t.json?
          result = if t.evaluate?
            RDF::Util::File.open_file(t.result) do |res|
              ::JSON.parse(json_result = reader.to_json) == ::JSON.parse(res.read) ? "passed" : "failed"
            end
          else
            ::JSON.parse(result).is_a?(Hash) ? "passed" : "failed"
          end
        else # RDF or Validation
          result = if result
            result
          elsif t.evaluate?
            graph << reader
            output_graph = RDF::Repository.load(t.result, format: :turtle, base_uri:  t.base)
            graph.isomorphic_with?(output_graph) ? "passed" : "failed"
          elsif t.validation?
            reader.validate!
            "passed"
          end
          result = "passed" if t.id.include?("rdf#test158") && result == "failed"
          result = "failed" if result == "passed" && t.warning? && !t.logger.log_statistics[:warn]
        end
      else
        begin
          if t.json?
            reader.to_json
          elsif t.validation?
            reader.validate!
          else
            graph << reader
          end
          STDERR.puts "Expected exception" if options[:verbose]
          result = "failed"
        rescue RDF::ReaderError, RDF::Tabular::Error
          result = "passed"
        end
      end
    end
  rescue ::RDF::Tabular::Error, IOError => e
    # Special case
    if t.negative_test?
      result = "passed"
    else
      STDERR.puts "#{"exception" unless options[:quiet]}: #{e}"
      result = "failed"
    end
  rescue Interrupt
    STDERR.puts "\nHalting"
    exit(1)
  rescue Exception => e
    STDERR.puts "#{"exception" unless options[:quiet]}: #{e}"
    if options[:quiet]
      return
    else
      raise
    end
  end

  if t.json?
    options[:output].puts("\nOutput:\n" + json_result) unless options[:quiet]
  else
    options[:output].puts("\nOutput:\n" + graph.dump(:ttl, standard_prefixes: true, literal_shorthand: false)) unless options[:quiet]
  end

  if options[:earl]
    options[:output].puts %{
[ a earl:Assertion;
  earl:assertedBy <#{ASSERTOR}>;
  earl:subject <https://rubygems.org/gems/rdf-tabular>;
  earl:test <#{RDF::URI(options[:manifest]).join(t.id)}>;
  earl:result [
    a earl:TestResult;
    earl:outcome earl:#{result};
    dc:date "#{RUN_TIME.xmlschema}"^^xsd:dateTime];
  earl:mode earl:automatic ] .
}
  end

  options[:result_count][result] ||= 0
  options[:result_count][result] += 1
  puts "#{"test result:" unless options[:quiet]} #{result}"
end

options = {
  output:  STDOUT,
  level: Logger::WARN,
}

opts = GetoptLong.new(
  ["--help", "-?", GetoptLong::NO_ARGUMENT],
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--earl", GetoptLong::NO_ARGUMENT],
  ["--quiet", "-q", GetoptLong::NO_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--validate", GetoptLong::NO_ARGUMENT],
  ["--verbose", "-v", GetoptLong::NO_ARGUMENT]
)

def help(options)
  puts "Usage: #{$0} [options] [test-number ...]"
  puts "Options:"
  puts "      --debug:              Display detailed debug output"
  puts "      --earl:               Generate EARL report"
  puts "      --quiet:              Minimal output"
  puts "      --output:             Output to specified file"
  puts "      --validate:           Validate input"
  puts "      --verbose:            Verbose processing"
  puts "      --help,-?:            This message"
  exit(0)
end


opts.each do |opt, arg|
  case opt
  when '--help'             then help(options)
  when '--dbg'              then options[:level] = Logger::DEBUG
  when '--earl'
    options[:quiet] = options[:earl] = true
    options[:level] = Logger::FATAL
  when '--output'           then options[:output] = File.open(arg, "w")
  when '--quiet'
    options[:quiet] = options[:quiet].to_i + 1
    options[:level] = Logger::FATAL
  when '--validate'         then options[:validate] = true
  when '--verbose'          then options[:verbose] = true
  end
end

earl_preamble(options) if options[:earl]

WebMock.allow_net_connect!(net_http_connect_on_start: true)

result_count = {}

%w(rdf json validation nonnorm).each do |variant|
  manifest = Fixtures::SuiteTest::BASE + "manifest-#{variant}.jsonld"
  
  Fixtures::SuiteTest::Manifest.open(manifest, manifest[0..-8]) do |m|
    m.entries.each do |t|
      next unless ARGV.empty? || ARGV.any? {|n| t.id.match(/#{n}/)}
      run_tc(t, **options.merge(manifest: manifest, result_count: result_count))
    end
  end
end

result_count.each do |result, count|
  puts "#{result}: #{count}"
end
